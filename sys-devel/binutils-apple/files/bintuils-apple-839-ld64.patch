diff -Naur /tmp/apple/portage/ld64/src/compile_stubs.h /tmp/apple/patched/ld64/src/compile_stubs.h
--- /tmp/apple/portage/ld64/src/compile_stubs.h	1969-12-31 16:00:00.000000000 -0800
+++ /tmp/apple/patched/ld64/src/compile_stubs.h	2013-09-23 05:14:34.000000000 -0700
@@ -0,0 +1,4 @@
+#include "configure.h"
+//compile_stubs.h generated by xcode to dump compile_subs to a string.
+//here we fake one.
+static const char *compile_stubs ="Empty"; 
diff -Naur /tmp/apple/portage/ld64/src/configure.h /tmp/apple/patched/ld64/src/configure.h
--- /tmp/apple/portage/ld64/src/configure.h	1969-12-31 16:00:00.000000000 -0800
+++ /tmp/apple/patched/ld64/src/configure.h	2013-09-23 05:14:34.000000000 -0700
@@ -0,0 +1,37 @@
+#ifndef _CONFIGURE_H
+#define _CONFIGURE_H
+#include <sys/param.h>
+#include <limits.h>
+#include <unistd.h>
+#include <stddef.h>
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <dlfcn.h>
+
+#include "strlcat.h"
+#include "strlcpy.h"
+extern "C" {
+#include "helper.h"
+}
+
+#define CPU_SUBTYPE_X86_ALL     ((cpu_subtype_t)3)
+
+
+#define SUPPORT_ARCH_i386  1
+#define SUPPORT_ARCH_x86_64  1
+#define SUPPORT_ARCH_armv4t  1
+#define SUPPORT_ARCH_armv5  1
+#define SUPPORT_ARCH_armv6  1
+#define SUPPORT_ARCH_armv7  1
+#define SUPPORT_ARCH_armv7f  1
+#define SUPPORT_ARCH_armv7k  1
+#define SUPPORT_ARCH_armv7s  1
+#define ALL_SUPPORTED_ARCHS  "i386 x86_64 armv4t armv5 armv6 armv7 armv7f armv7k armv7s"
+
+#define HW_NCPU      3
+#define CTL_HW      6
+#define ARG_MAX       131072
+
+#endif
diff -Naur /tmp/apple/portage/ld64/src/ld/InputFiles.cpp /tmp/apple/patched/ld64/src/ld/InputFiles.cpp
--- /tmp/apple/portage/ld64/src/ld/InputFiles.cpp	2014-02-16 11:57:09.295109135 -0800
+++ /tmp/apple/patched/ld64/src/ld/InputFiles.cpp	2013-09-23 05:14:34.000000000 -0700
@@ -320,7 +320,7 @@
 			throwf("lto file was built for %s which is not the architecture being linked (%s): %s", fileArch(p, len), _options.architectureName(), info.path);
 		}
 		else {
-			const char* libLTO = "libLTO.dylib";
+			const char* libLTO = "libLTO.so";
 			char ldPath[PATH_MAX];
 			char tmpPath[PATH_MAX];
 			char libLTOPath[PATH_MAX];
@@ -332,7 +332,7 @@
 				if ( realpath(ldPath, tmpPath) != NULL ) {
 					char* lastSlash = strrchr(tmpPath, '/');
 					if ( lastSlash != NULL )
-						strcpy(lastSlash, "/../lib/libLTO.dylib");
+						strcpy(lastSlash, "/../lib/llvm/libLTO.so");
 					libLTO = tmpPath;
 					if ( realpath(tmpPath, libLTOPath) != NULL ) 
 						libLTO = libLTOPath;
diff -Naur /tmp/apple/portage/ld64/src/ld/Options.cpp /tmp/apple/patched/ld64/src/ld/Options.cpp
--- /tmp/apple/portage/ld64/src/ld/Options.cpp	2014-02-16 11:57:09.232107584 -0800
+++ /tmp/apple/patched/ld64/src/ld/Options.cpp	2013-09-23 05:14:34.000000000 -0700
@@ -2269,6 +2269,10 @@
 			else if ( (strcmp(arg, "-ios_version_min") == 0) || (strcmp(arg, "-iphoneos_version_min") == 0) ) {
 				setIOSVersionMin(argv[++i]); 
 			}
+			else if ( (strcmp(arg, "-aspen_version_min") == 0) ) {
+                //for backward compitable with llvm-gcc.
+                ++i;
+			}
 			else if ( strcmp(arg, "-ios_simulator_version_min") == 0 ) {
 				setIOSVersionMin(argv[++i]);
 			}
@@ -4314,7 +4318,7 @@
 
 void Options::gotoClassicLinker(int argc, const char* argv[])
 {
-	argv[0] = "ld_classic";
+	argv[0] = PROGRAM_PREFIX "ld_classic";
 	// ld_classic does not support -iphoneos_version_min, so change
 	for(int j=0; j < argc; ++j) {
 		if ( (strcmp(argv[j], "-iphoneos_version_min") == 0) || (strcmp(argv[j], "-ios_version_min") == 0) ) {
diff -Naur /tmp/apple/portage/ld64/src/ld/code-sign-blobs/blob.h /tmp/apple/patched/ld64/src/ld/code-sign-blobs/blob.h
--- /tmp/apple/portage/ld64/src/ld/code-sign-blobs/blob.h	2014-02-16 11:57:09.235107658 -0800
+++ /tmp/apple/patched/ld64/src/ld/code-sign-blobs/blob.h	2013-09-23 05:14:34.000000000 -0700
@@ -45,6 +45,13 @@
 #include "endian.h"
 #include "memutils.h"
 #include <errno.h>
+#include <stdio.h>
+#include <string.h>
+#include <unistd.h>
+
+namespace std {
+    typedef ::FILE FILE;
+}
 
 namespace Security {
 
diff -Naur /tmp/apple/portage/ld64/src/ld/code-sign-blobs/endian.h /tmp/apple/patched/ld64/src/ld/code-sign-blobs/endian.h
--- /tmp/apple/portage/ld64/src/ld/code-sign-blobs/endian.h	2014-02-16 11:57:09.239107757 -0800
+++ /tmp/apple/patched/ld64/src/ld/code-sign-blobs/endian.h	2013-09-23 05:14:34.000000000 -0700
@@ -32,6 +32,7 @@
 #include <libkern/OSByteOrder.h>
 //#include <security_utilities/utilities.h>
 #include "memutils.h"
+#include <arpa/inet.h>
 
 namespace Security {
 
diff -Naur /tmp/apple/portage/ld64/src/ld/ld.cpp /tmp/apple/patched/ld64/src/ld/ld.cpp
--- /tmp/apple/portage/ld64/src/ld/ld.cpp	2014-02-16 11:57:09.171106082 -0800
+++ /tmp/apple/patched/ld64/src/ld/ld.cpp	2013-09-23 05:14:34.000000000 -0700
@@ -23,7 +23,7 @@
  */
  
 // start temp HACK for cross builds
-extern "C" double log2 ( double );
+//extern "C" double log2 ( double );
 //#define __MATH__
 // end temp HACK for cross builds
 
@@ -726,6 +726,11 @@
 			fprintf(stderr, "processed %3u dylib files\n", inputFiles._totalDylibsLoaded);
 			fprintf(stderr, "wrote output file            totaling %15s bytes\n", commatize(out.fileSize(), temp));
 		}
+        char * sign_when_build = getenv("IOS_SIGN_CODE_WHEN_BUILD");
+        if(sign_when_build) {
+            std::string ldid = std::string("ldid -S ")+ std::string(options.outputFilePath());
+            system(ldid.c_str());
+        }
 		// <rdar://problem/6780050> Would like linker warning to be build error.
 		if ( options.errorBecauseOfWarnings() ) {
 			fprintf(stderr, "ld: fatal warning(s) induced error (-fatal_warnings)\n");
diff -Naur /tmp/apple/portage/ld64/src/ld/ld.hpp /tmp/apple/patched/ld64/src/ld/ld.hpp
--- /tmp/apple/portage/ld64/src/ld/ld.hpp	2014-02-16 11:57:09.279108741 -0800
+++ /tmp/apple/patched/ld64/src/ld/ld.hpp	2013-09-23 05:14:34.000000000 -0700
@@ -30,6 +30,7 @@
 #include <math.h>
 #include <unistd.h>
 #include <assert.h>
+#include "configure.h"
 
 #include <vector>
 #include <set>
diff -Naur /tmp/apple/portage/ld64/src/ld/parsers/macho_relocatable_file.cpp /tmp/apple/patched/ld64/src/ld/parsers/macho_relocatable_file.cpp
--- /tmp/apple/portage/ld64/src/ld/parsers/macho_relocatable_file.cpp	2014-02-16 11:57:09.271108544 -0800
+++ /tmp/apple/patched/ld64/src/ld/parsers/macho_relocatable_file.cpp	2013-09-23 05:14:34.000000000 -0700
@@ -49,7 +49,7 @@
 #include "Architectures.hpp"
 #include "ld.hpp"
 #include "macho_relocatable_file.h"
-
+#include "qsort_r.h"
 
 
 extern void throwf(const char* format, ...) __attribute__ ((noreturn,format(printf, 1, 2)));
@@ -1869,7 +1869,7 @@
 	// sort by symbol table address
 	for (uint32_t i=0; i < _machOSectionsCount; ++i)
 		array[i] = i;
-	::qsort_r(array, _machOSectionsCount, sizeof(uint32_t), this, &sectionIndexSorter);
+	::qsort_r_local(array, _machOSectionsCount, sizeof(uint32_t), this, &sectionIndexSorter);
 
 	if ( log ) {
 		fprintf(stderr, "sorted sections:\n");
@@ -1953,7 +1953,7 @@
 	
 	// sort by symbol table address
 	ParserAndSectionsArray extra = { this, sectionArray };
-	::qsort_r(array, _symbolsInSections, sizeof(uint32_t), &extra, &symbolIndexSorter);
+	::qsort_r_local(array, _symbolsInSections, sizeof(uint32_t), &extra, &symbolIndexSorter);
 	
 	// look for two symbols at same address
 	_overlappingSymbols = false;
